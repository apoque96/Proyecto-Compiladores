//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Gramatica.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class GramaticaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, ID=31, INT=32, 
		FLOAT=33, STRING=34, BOOL=35, WS=36;
	public const int
		RULE_prog = 0, RULE_pg = 1, RULE_sl = 2, RULE_s = 3, RULE_d = 4, RULE_e = 5, 
		RULE_ep = 6, RULE_t = 7, RULE_tp = 8, RULE_f = 9, RULE_ds = 10, RULE_dsp = 11, 
		RULE_io = 12, RULE_ce = 13, RULE_ifd = 14, RULE_ed = 15, RULE_edp = 16, 
		RULE_fd = 17, RULE_rt = 18, RULE_pl = 19, RULE_plp = 20, RULE_ty = 21, 
		RULE_typ = 22, RULE_fc = 23, RULE_p = 24, RULE_pp = 25;
	public static readonly string[] ruleNames = {
		"prog", "pg", "sl", "s", "d", "e", "ep", "t", "tp", "f", "ds", "dsp", 
		"io", "ce", "ifd", "ed", "edp", "fd", "rt", "pl", "plp", "ty", "typ", 
		"fc", "p", "pp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'BeginProgram'", "'int'", "'='", "';'", "'float'", "'string'", 
		"'bool'", "'+'", "'-'", "'*'", "'/'", "'('", "')'", "'=='", "'!='", "'>'", 
		"'<'", "'>='", "'<='", "'Read'", "'Write'", "'while'", "'{'", "'}'", "'if'", 
		"'else'", "'fn'", "'->'", "'return'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "ID", "INT", "FLOAT", "STRING", 
		"BOOL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Gramatica.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GramaticaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GramaticaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GramaticaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PgContext pg() {
			return GetRuleContext<PgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GramaticaParser.Eof, 0); }
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			pg();
			State = 53;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FdContext fd() {
			return GetRuleContext<FdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SlContext sl() {
			return GetRuleContext<SlContext>(0);
		}
		public PgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterPg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitPg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PgContext pg() {
		PgContext _localctx = new PgContext(Context, State);
		EnterRule(_localctx, 2, RULE_pg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			fd();
			State = 56;
			Match(T__0);
			State = 57;
			sl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SContext s() {
			return GetRuleContext<SContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SlContext sl() {
			return GetRuleContext<SlContext>(0);
		}
		public SlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterSl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitSl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlContext sl() {
		SlContext _localctx = new SlContext(Context, State);
		EnterRule(_localctx, 4, RULE_sl);
		try {
			State = 63;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__4:
			case T__5:
			case T__6:
			case T__19:
			case T__20:
			case T__21:
			case T__24:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59;
				s();
				State = 60;
				sl();
				}
				break;
			case Eof:
			case T__23:
			case T__28:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DContext d() {
			return GetRuleContext<DContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CeContext ce() {
			return GetRuleContext<CeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IoContext io() {
			return GetRuleContext<IoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FcContext fc() {
			return GetRuleContext<FcContext>(0);
		}
		public SContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_s; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SContext s() {
		SContext _localctx = new SContext(Context, State);
		EnterRule(_localctx, 6, RULE_s);
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__4:
			case T__5:
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				d();
				}
				break;
			case T__21:
			case T__24:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66;
				ce();
				}
				break;
			case T__19:
			case T__20:
				EnterOuterAlt(_localctx, 3);
				{
				State = 67;
				io();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 68;
				fc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GramaticaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GramaticaParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(GramaticaParser.BOOL, 0); }
		public DContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_d; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DContext d() {
		DContext _localctx = new DContext(Context, State);
		EnterRule(_localctx, 8, RULE_d);
		try {
			State = 92;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				Match(T__1);
				State = 72;
				Match(ID);
				State = 73;
				Match(T__2);
				State = 74;
				e();
				State = 75;
				Match(T__3);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77;
				Match(T__4);
				State = 78;
				Match(ID);
				State = 79;
				Match(T__2);
				State = 80;
				e();
				State = 81;
				Match(T__3);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 83;
				Match(T__5);
				State = 84;
				Match(ID);
				State = 85;
				Match(T__2);
				State = 86;
				Match(STRING);
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 4);
				{
				State = 87;
				Match(T__6);
				State = 88;
				Match(ID);
				State = 89;
				Match(T__2);
				State = 90;
				Match(BOOL);
				State = 91;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TContext t() {
			return GetRuleContext<TContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EpContext ep() {
			return GetRuleContext<EpContext>(0);
		}
		public EContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_e; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitE(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EContext e() {
		EContext _localctx = new EContext(Context, State);
		EnterRule(_localctx, 10, RULE_e);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			t();
			State = 95;
			ep();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TContext t() {
			return GetRuleContext<TContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EpContext ep() {
			return GetRuleContext<EpContext>(0);
		}
		public EpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterEp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitEp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EpContext ep() {
		EpContext _localctx = new EpContext(Context, State);
		EnterRule(_localctx, 12, RULE_ep);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				Match(T__7);
				State = 98;
				t();
				State = 99;
				ep();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				Match(T__8);
				State = 102;
				t();
				State = 103;
				ep();
				}
				break;
			case T__3:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FContext f() {
			return GetRuleContext<FContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TpContext tp() {
			return GetRuleContext<TpContext>(0);
		}
		public TContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_t; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitT(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TContext t() {
		TContext _localctx = new TContext(Context, State);
		EnterRule(_localctx, 14, RULE_t);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			f();
			State = 109;
			tp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FContext f() {
			return GetRuleContext<FContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TpContext tp() {
			return GetRuleContext<TpContext>(0);
		}
		public TpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterTp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitTp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TpContext tp() {
		TpContext _localctx = new TpContext(Context, State);
		EnterRule(_localctx, 16, RULE_tp);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111;
				Match(T__9);
				State = 112;
				f();
				State = 113;
				tp();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115;
				Match(T__10);
				State = 116;
				f();
				State = 117;
				tp();
				}
				break;
			case T__3:
			case T__7:
			case T__8:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GramaticaParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(GramaticaParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GramaticaParser.ID, 0); }
		public FContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FContext f() {
		FContext _localctx = new FContext(Context, State);
		EnterRule(_localctx, 18, RULE_f);
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				Match(T__11);
				State = 123;
				e();
				State = 124;
				Match(T__12);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126;
				Match(INT);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 127;
				Match(FLOAT);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 128;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(GramaticaParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EContext[] e() {
			return GetRuleContexts<EContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e(int i) {
			return GetRuleContext<EContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DspContext dsp() {
			return GetRuleContext<DspContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(GramaticaParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(GramaticaParser.STRING, i);
		}
		public DsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterDs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitDs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DsContext ds() {
		DsContext _localctx = new DsContext(Context, State);
		EnterRule(_localctx, 20, RULE_ds);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				Match(BOOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				e();
				State = 133;
				dsp();
				State = 134;
				e();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 136;
				Match(STRING);
				State = 137;
				Match(T__13);
				State = 138;
				Match(STRING);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 139;
				Match(STRING);
				State = 140;
				Match(T__14);
				State = 141;
				Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DspContext : ParserRuleContext {
		public DspContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dsp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterDsp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitDsp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDsp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DspContext dsp() {
		DspContext _localctx = new DspContext(Context, State);
		EnterRule(_localctx, 22, RULE_dsp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1032192L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GramaticaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GramaticaParser.STRING, 0); }
		public IoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_io; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterIo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitIo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IoContext io() {
		IoContext _localctx = new IoContext(Context, State);
		EnterRule(_localctx, 24, RULE_io);
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146;
				Match(T__19);
				State = 147;
				Match(T__11);
				State = 148;
				Match(ID);
				State = 149;
				Match(T__12);
				State = 150;
				Match(T__3);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151;
				Match(T__20);
				State = 152;
				Match(T__11);
				State = 153;
				Match(STRING);
				State = 154;
				Match(T__12);
				State = 155;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfdContext ifd() {
			return GetRuleContext<IfdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DsContext ds() {
			return GetRuleContext<DsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SlContext sl() {
			return GetRuleContext<SlContext>(0);
		}
		public CeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ce; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterCe(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitCe(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CeContext ce() {
		CeContext _localctx = new CeContext(Context, State);
		EnterRule(_localctx, 26, RULE_ce);
		try {
			State = 167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158;
				ifd();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159;
				Match(T__21);
				State = 160;
				Match(T__11);
				State = 161;
				ds();
				State = 162;
				Match(T__12);
				State = 163;
				Match(T__22);
				State = 164;
				sl();
				State = 165;
				Match(T__23);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DsContext ds() {
			return GetRuleContext<DsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SlContext sl() {
			return GetRuleContext<SlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EdContext ed() {
			return GetRuleContext<EdContext>(0);
		}
		public IfdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterIfd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitIfd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfdContext ifd() {
		IfdContext _localctx = new IfdContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(T__24);
			State = 170;
			Match(T__11);
			State = 171;
			ds();
			State = 172;
			Match(T__12);
			State = 173;
			Match(T__22);
			State = 174;
			sl();
			State = 175;
			Match(T__23);
			State = 176;
			ed();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EdpContext edp() {
			return GetRuleContext<EdpContext>(0);
		}
		public EdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterEd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitEd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdContext ed() {
		EdContext _localctx = new EdContext(Context, State);
		EnterRule(_localctx, 30, RULE_ed);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178;
				Match(T__25);
				State = 179;
				edp();
				}
				break;
			case Eof:
			case T__1:
			case T__4:
			case T__5:
			case T__6:
			case T__19:
			case T__20:
			case T__21:
			case T__23:
			case T__24:
			case T__28:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SlContext sl() {
			return GetRuleContext<SlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfdContext ifd() {
			return GetRuleContext<IfdContext>(0);
		}
		public EdpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterEdp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitEdp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdpContext edp() {
		EdpContext _localctx = new EdpContext(Context, State);
		EnterRule(_localctx, 32, RULE_edp);
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183;
				Match(T__22);
				State = 184;
				sl();
				State = 185;
				Match(T__23);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187;
				ifd();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GramaticaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PlContext pl() {
			return GetRuleContext<PlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtContext rt() {
			return GetRuleContext<RtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FdContext fd() {
			return GetRuleContext<FdContext>(0);
		}
		public FdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterFd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitFd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FdContext fd() {
		FdContext _localctx = new FdContext(Context, State);
		EnterRule(_localctx, 34, RULE_fd);
		try {
			State = 199;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__26:
				EnterOuterAlt(_localctx, 1);
				{
				State = 190;
				Match(T__26);
				State = 191;
				Match(ID);
				State = 192;
				Match(T__11);
				State = 193;
				pl();
				State = 194;
				Match(T__12);
				State = 195;
				rt();
				State = 196;
				fd();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TyContext ty() {
			return GetRuleContext<TyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SlContext sl() {
			return GetRuleContext<SlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypContext typ() {
			return GetRuleContext<TypContext>(0);
		}
		public RtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterRt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitRt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RtContext rt() {
		RtContext _localctx = new RtContext(Context, State);
		EnterRule(_localctx, 36, RULE_rt);
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201;
				Match(T__27);
				State = 202;
				ty();
				State = 203;
				Match(T__22);
				State = 204;
				sl();
				State = 205;
				Match(T__28);
				State = 206;
				typ();
				State = 207;
				Match(T__3);
				State = 208;
				Match(T__23);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 210;
				Match(T__22);
				State = 211;
				sl();
				State = 212;
				Match(T__23);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TyContext ty() {
			return GetRuleContext<TyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GramaticaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PlpContext plp() {
			return GetRuleContext<PlpContext>(0);
		}
		public PlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterPl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitPl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlContext pl() {
		PlContext _localctx = new PlContext(Context, State);
		EnterRule(_localctx, 38, RULE_pl);
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__4:
			case T__5:
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216;
				ty();
				State = 217;
				Match(ID);
				State = 218;
				plp();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TyContext ty() {
			return GetRuleContext<TyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GramaticaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PlpContext plp() {
			return GetRuleContext<PlpContext>(0);
		}
		public PlpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterPlp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitPlp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlpContext plp() {
		PlpContext _localctx = new PlpContext(Context, State);
		EnterRule(_localctx, 40, RULE_plp);
		try {
			State = 229;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__29:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223;
				Match(T__29);
				State = 224;
				ty();
				State = 225;
				Match(ID);
				State = 226;
				plp();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TyContext : ParserRuleContext {
		public TyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterTy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitTy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TyContext ty() {
		TyContext _localctx = new TyContext(Context, State);
		EnterRule(_localctx, 42, RULE_ty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 228L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GramaticaParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(GramaticaParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GramaticaParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(GramaticaParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GramaticaParser.ID, 0); }
		public TypContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typ; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterTyp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitTyp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypContext typ() {
		TypContext _localctx = new TypContext(Context, State);
		EnterRule(_localctx, 44, RULE_typ);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 66571993088L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GramaticaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PContext p() {
			return GetRuleContext<PContext>(0);
		}
		public FcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterFc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitFc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FcContext fc() {
		FcContext _localctx = new FcContext(Context, State);
		EnterRule(_localctx, 46, RULE_fc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			Match(ID);
			State = 236;
			Match(T__11);
			State = 237;
			p();
			State = 238;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypContext typ() {
			return GetRuleContext<TypContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PpContext pp() {
			return GetRuleContext<PpContext>(0);
		}
		public PContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_p; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PContext p() {
		PContext _localctx = new PContext(Context, State);
		EnterRule(_localctx, 48, RULE_p);
		try {
			State = 244;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
			case INT:
			case FLOAT:
			case STRING:
			case BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 240;
				typ();
				State = 241;
				pp();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypContext typ() {
			return GetRuleContext<TypContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PpContext pp() {
			return GetRuleContext<PpContext>(0);
		}
		public PpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterPp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitPp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PpContext pp() {
		PpContext _localctx = new PpContext(Context, State);
		EnterRule(_localctx, 50, RULE_pp);
		try {
			State = 251;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__29:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246;
				Match(T__29);
				State = 247;
				typ();
				State = 248;
				pp();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,36,254,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
		2,1,2,1,2,1,2,3,2,64,8,2,1,3,1,3,1,3,1,3,3,3,70,8,3,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,
		93,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,107,8,6,1,7,
		1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,121,8,8,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,3,9,130,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,3,10,143,8,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,3,12,157,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		3,13,168,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
		15,3,15,182,8,15,1,16,1,16,1,16,1,16,1,16,3,16,189,8,16,1,17,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,3,17,200,8,17,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,215,8,18,1,19,1,19,1,19,1,19,
		1,19,3,19,222,8,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,230,8,20,1,21,1,
		21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,3,24,245,8,24,
		1,25,1,25,1,25,1,25,1,25,3,25,252,8,25,1,25,0,0,26,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,0,3,1,0,14,19,2,
		0,2,2,5,7,1,0,31,35,254,0,52,1,0,0,0,2,55,1,0,0,0,4,63,1,0,0,0,6,69,1,
		0,0,0,8,92,1,0,0,0,10,94,1,0,0,0,12,106,1,0,0,0,14,108,1,0,0,0,16,120,
		1,0,0,0,18,129,1,0,0,0,20,142,1,0,0,0,22,144,1,0,0,0,24,156,1,0,0,0,26,
		167,1,0,0,0,28,169,1,0,0,0,30,181,1,0,0,0,32,188,1,0,0,0,34,199,1,0,0,
		0,36,214,1,0,0,0,38,221,1,0,0,0,40,229,1,0,0,0,42,231,1,0,0,0,44,233,1,
		0,0,0,46,235,1,0,0,0,48,244,1,0,0,0,50,251,1,0,0,0,52,53,3,2,1,0,53,54,
		5,0,0,1,54,1,1,0,0,0,55,56,3,34,17,0,56,57,5,1,0,0,57,58,3,4,2,0,58,3,
		1,0,0,0,59,60,3,6,3,0,60,61,3,4,2,0,61,64,1,0,0,0,62,64,1,0,0,0,63,59,
		1,0,0,0,63,62,1,0,0,0,64,5,1,0,0,0,65,70,3,8,4,0,66,70,3,26,13,0,67,70,
		3,24,12,0,68,70,3,46,23,0,69,65,1,0,0,0,69,66,1,0,0,0,69,67,1,0,0,0,69,
		68,1,0,0,0,70,7,1,0,0,0,71,72,5,2,0,0,72,73,5,31,0,0,73,74,5,3,0,0,74,
		75,3,10,5,0,75,76,5,4,0,0,76,93,1,0,0,0,77,78,5,5,0,0,78,79,5,31,0,0,79,
		80,5,3,0,0,80,81,3,10,5,0,81,82,5,4,0,0,82,93,1,0,0,0,83,84,5,6,0,0,84,
		85,5,31,0,0,85,86,5,3,0,0,86,93,5,34,0,0,87,88,5,7,0,0,88,89,5,31,0,0,
		89,90,5,3,0,0,90,91,5,35,0,0,91,93,5,4,0,0,92,71,1,0,0,0,92,77,1,0,0,0,
		92,83,1,0,0,0,92,87,1,0,0,0,93,9,1,0,0,0,94,95,3,14,7,0,95,96,3,12,6,0,
		96,11,1,0,0,0,97,98,5,8,0,0,98,99,3,14,7,0,99,100,3,12,6,0,100,107,1,0,
		0,0,101,102,5,9,0,0,102,103,3,14,7,0,103,104,3,12,6,0,104,107,1,0,0,0,
		105,107,1,0,0,0,106,97,1,0,0,0,106,101,1,0,0,0,106,105,1,0,0,0,107,13,
		1,0,0,0,108,109,3,18,9,0,109,110,3,16,8,0,110,15,1,0,0,0,111,112,5,10,
		0,0,112,113,3,18,9,0,113,114,3,16,8,0,114,121,1,0,0,0,115,116,5,11,0,0,
		116,117,3,18,9,0,117,118,3,16,8,0,118,121,1,0,0,0,119,121,1,0,0,0,120,
		111,1,0,0,0,120,115,1,0,0,0,120,119,1,0,0,0,121,17,1,0,0,0,122,123,5,12,
		0,0,123,124,3,10,5,0,124,125,5,13,0,0,125,130,1,0,0,0,126,130,5,32,0,0,
		127,130,5,33,0,0,128,130,5,31,0,0,129,122,1,0,0,0,129,126,1,0,0,0,129,
		127,1,0,0,0,129,128,1,0,0,0,130,19,1,0,0,0,131,143,5,35,0,0,132,133,3,
		10,5,0,133,134,3,22,11,0,134,135,3,10,5,0,135,143,1,0,0,0,136,137,5,34,
		0,0,137,138,5,14,0,0,138,143,5,34,0,0,139,140,5,34,0,0,140,141,5,15,0,
		0,141,143,5,34,0,0,142,131,1,0,0,0,142,132,1,0,0,0,142,136,1,0,0,0,142,
		139,1,0,0,0,143,21,1,0,0,0,144,145,7,0,0,0,145,23,1,0,0,0,146,147,5,20,
		0,0,147,148,5,12,0,0,148,149,5,31,0,0,149,150,5,13,0,0,150,157,5,4,0,0,
		151,152,5,21,0,0,152,153,5,12,0,0,153,154,5,34,0,0,154,155,5,13,0,0,155,
		157,5,4,0,0,156,146,1,0,0,0,156,151,1,0,0,0,157,25,1,0,0,0,158,168,3,28,
		14,0,159,160,5,22,0,0,160,161,5,12,0,0,161,162,3,20,10,0,162,163,5,13,
		0,0,163,164,5,23,0,0,164,165,3,4,2,0,165,166,5,24,0,0,166,168,1,0,0,0,
		167,158,1,0,0,0,167,159,1,0,0,0,168,27,1,0,0,0,169,170,5,25,0,0,170,171,
		5,12,0,0,171,172,3,20,10,0,172,173,5,13,0,0,173,174,5,23,0,0,174,175,3,
		4,2,0,175,176,5,24,0,0,176,177,3,30,15,0,177,29,1,0,0,0,178,179,5,26,0,
		0,179,182,3,32,16,0,180,182,1,0,0,0,181,178,1,0,0,0,181,180,1,0,0,0,182,
		31,1,0,0,0,183,184,5,23,0,0,184,185,3,4,2,0,185,186,5,24,0,0,186,189,1,
		0,0,0,187,189,3,28,14,0,188,183,1,0,0,0,188,187,1,0,0,0,189,33,1,0,0,0,
		190,191,5,27,0,0,191,192,5,31,0,0,192,193,5,12,0,0,193,194,3,38,19,0,194,
		195,5,13,0,0,195,196,3,36,18,0,196,197,3,34,17,0,197,200,1,0,0,0,198,200,
		1,0,0,0,199,190,1,0,0,0,199,198,1,0,0,0,200,35,1,0,0,0,201,202,5,28,0,
		0,202,203,3,42,21,0,203,204,5,23,0,0,204,205,3,4,2,0,205,206,5,29,0,0,
		206,207,3,44,22,0,207,208,5,4,0,0,208,209,5,24,0,0,209,215,1,0,0,0,210,
		211,5,23,0,0,211,212,3,4,2,0,212,213,5,24,0,0,213,215,1,0,0,0,214,201,
		1,0,0,0,214,210,1,0,0,0,215,37,1,0,0,0,216,217,3,42,21,0,217,218,5,31,
		0,0,218,219,3,40,20,0,219,222,1,0,0,0,220,222,1,0,0,0,221,216,1,0,0,0,
		221,220,1,0,0,0,222,39,1,0,0,0,223,224,5,30,0,0,224,225,3,42,21,0,225,
		226,5,31,0,0,226,227,3,40,20,0,227,230,1,0,0,0,228,230,1,0,0,0,229,223,
		1,0,0,0,229,228,1,0,0,0,230,41,1,0,0,0,231,232,7,1,0,0,232,43,1,0,0,0,
		233,234,7,2,0,0,234,45,1,0,0,0,235,236,5,31,0,0,236,237,5,12,0,0,237,238,
		3,48,24,0,238,239,5,13,0,0,239,47,1,0,0,0,240,241,3,44,22,0,241,242,3,
		50,25,0,242,245,1,0,0,0,243,245,1,0,0,0,244,240,1,0,0,0,244,243,1,0,0,
		0,245,49,1,0,0,0,246,247,5,30,0,0,247,248,3,44,22,0,248,249,3,50,25,0,
		249,252,1,0,0,0,250,252,1,0,0,0,251,246,1,0,0,0,251,250,1,0,0,0,252,51,
		1,0,0,0,17,63,69,92,106,120,129,142,156,167,181,188,199,214,221,229,244,
		251
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
