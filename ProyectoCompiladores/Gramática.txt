Gramatica:

T = {int, float, string, bool, if, else, while, Read, Write, return, +, -, *, /, >, <, =, !=, (, ), {, }, [, ], ;, ',', ->, ID, STRING, INT, FLOAT, BOOL}
NT = {<Declaration>, <Declaration'>, <StatementList>, <Statement>, <Type>, <Operation>, <Control>, <Expression>, <Expression'>, <Term>, <Term'>, <Factor>, 
		<Literal>, <ifDeclaration>, <elseDeclaration>, <elseDeclaration'>, <FunctionDeclaration>, <ParameterList>, <ParameterList'>,
		<MultiplicativeOperator>, <AdditiveOperator>, <ReturnType>, <IO>}
$ = {<Program>}

P =
{
	<Program> ::= <StatementList>
	<StatementList> ::= <Statement> <StatementList> | ε
	<Statement> ::= <Declaration> | <Operation> | <Control> | <IO> | <FunctionDeclaration>
	<Declaration> ::= <Type> ID <Declaration'>;
	<Declaration'> ::= = <Expression> | ε
	<Type> ::= int | float | string | bool
	<Operation> ::= <Expression>;
	<Control> ::= <ifDeclaration> | while (<Expression>) { <StatementList> }
	<ifDeclaration> ::= if (<Expression>) { <StatementList> } <elseDeclaration>
	<elseDeclaration> ::= else <elseDeclaration'> | ε
	<elseDeclaration'> ::= { <StatementList> } | <ifDeclaration>
	<Expression> ::= <Term> <Expression'>
	<Expression'> ::= <AdditiveOperator> <Term> <Expression'> | ε
	<Term> ::= <Factor> <Term'>
	<Term'> ::= <MultiplicativeOperator> <Factor> <Term'> | ε
	<Factor> ::= ID | <Literal> | ( <Expression> )
	<AdditiveOperator> ::= + | -
	<MultiplicativeOperator> ::= * | /
	<Literal> ::= INT | FLOAT | STRING | BOOL
	<IO> ::= Read(ID); | Write(<Expression>);
	<FunctionDeclaration> ::= fn ID(<ParameterList>) <ReturnType>
	<ReturnType> ::= -> <Type> { <StatementList> return <Expression> } | { <StatementList> }
	<ParameterList> ::= <Type> ID <ParameterList'> | ε
	<ParameterList'> ::= , <Type> ID <ParameterList'> | ε
}



Expresiones Regulares:

ID = [a-zA-Z][a-zA-Z1-9_]*
INT = [0-9]+
FLOAT = f[0-9]+\.[0-9]+
STRING = "([^"\\]*(\\.[^"\\]*)*)"
BOOL = true|false
KEYWORD = int | float | string | bool | if | else | while | Read | Write | return
SPECIALCHAR = + | - | * | / | > | < | = | != | ( | ) | { | } | [ | ] | ; | , | ' | "